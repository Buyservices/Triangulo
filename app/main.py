from fastapi import FastAPI
from app.interfaces.http.api.v1.routers import router as v1_router
from app.interfaces.http.api.v1.routers_catalogo import router as catalogo_router


app = FastAPI(
    title="API Newcon Cons√≥rcio - Bridge de Integra√ß√£o",
    version="2.0.0",
    description="""
    ## üöÄ **API de Integra√ß√£o com Sistema Newcon Cons√≥rcio**
    
    Esta API serve como **bridge** entre sistemas externos e o sistema **Newcon Cons√≥rcio**,
    expondo endpoints REST que internamente se comunicam com WebServices SOAP da Newcon.
    
    ### üéØ **Funcionalidades Implementadas**
    
    #### ‚úÖ **Registro de Clientes** (FASE 1 - CONCLU√çDA)
    - **Endpoint**: `POST /v1/clientes`
    - **Status**: ‚úÖ **FUNCIONANDO** - Integra√ß√£o completa e testada
    - **Integra√ß√£o**: Chama `prcManutencaoCliente_new` da Newcon
    
                    #### ‚úÖ **Cat√°logo de Cons√≥rcios** (FASE 2 - CONCLU√çDA)
                - **Status**: üéâ **100% FUNCIONANDO** + ‚úÖ **TESTADO EXAUSTIVAMENTE**
                - **Endpoints**: 6 endpoints para consulta de cat√°logo
                - **Integra√ß√£o**: WebServices SOAP da Newcon (m√©todos `cns*`) ‚úÖ **100% FUNCIONANDO**
                - **Dados**: 13 categorias + 1 filial + 157 tipos de venda retornados
    
    ### üèóÔ∏è **Arquitetura**
    
    - **DDD + Clean Architecture**: Separa√ß√£o clara de responsabilidades
    - **Anti-Corruption Layer**: Mappers/parsers isolam a API da estrutura SOAP
    - **Async/Await**: Opera√ß√µes n√£o-bloqueantes para melhor performance
    - **Pydantic**: Valida√ß√£o robusta de dados e schemas
    
    ### üîó **Integra√ß√£o Newcon**
    
    - **WebServices SOAP**: Comunica√ß√£o via m√©todos `cns*` (consulta) e `prc*` (processo)
    - **Protocolo**: HTTP POST com envelope SOAP XML
    - **Timeout**: 30 segundos configur√°vel
    - **Tratamento de Erros**: Captura e reporta erros espec√≠ficos da Newcon
    
    ### üìö **Documenta√ß√£o**
    
    - **Swagger UI**: `/docs` - Interface interativa completa
    - **Testes**: `TESTES_CATALOGO_OFERTAS.md` - Guia passo a passo
    - **README**: Vis√£o geral do projeto e roadmap
    
                    ### üß™ **Como Testar**
                
                1. **Iniciar API**: `uvicorn app.main:app --reload --port 8000`
                2. **Swagger UI**: `http://localhost:8000/docs`
                3. **Testes Completos**: Todos os endpoints testados e funcionando ‚úÖ
                4. **Dados Reais**: 13 categorias + 1 filial + 157 tipos de venda ‚úÖ
    
    ---
    
    **Desenvolvido com FastAPI + Python**
    """,
    docs_url="/docs",
    redoc_url="/redoc",
)


@app.get("/health")
def health():
    return {"status": "ok"}


app.include_router(v1_router, prefix="/v1")
app.include_router(catalogo_router, prefix="/v1")

