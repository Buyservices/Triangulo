"""
Routers para endpoints do cat√°logo de cons√≥rcios.
"""

from fastapi import APIRouter, Depends, HTTPException, Query
from app.interfaces.http.api.v1.controllers_catalogo import (
    get_categorias,
    get_filiais,
    get_tipos_venda,
    get_bens_disponiveis,
    get_prazos_disponiveis,
    get_regra_cobranca,
)
from app.interfaces.http.api.v1.schemas_catalogo import (
    ListaTiposGruposSchema,
    ListaFiliaisSchema,
    ListaTiposVendasSchema,
    ListaBensDisponiveisSchema,
    ListaPrazosDisponiveisSchema,
    RegraCobrancaSchema,
)
from app.container import build_consultar_catalogo_uc
from app.application.use_cases.consultar_catalogo import ConsultarCatalogoUseCase

router = APIRouter(
    prefix="/catalog", 
    tags=["Cat√°logo de Cons√≥rcios"],
    responses={
        200: {"description": "Consulta realizada com sucesso"},
        400: {"description": "Par√¢metros inv√°lidos"},
        500: {"description": "Erro interno do servidor ou integra√ß√£o Newcon"}
    }
)


@router.get(
    "/categories", 
    response_model=ListaTiposGruposSchema,
    summary="Consultar Categorias de Cons√≥rcio",
    description="""
    **Consulta todas as categorias de cons√≥rcio dispon√≠veis no sistema.**
    
    Este endpoint retorna a lista completa de categorias como Im√≥veis, Ve√≠culos, 
    Motocicletas, etc. que est√£o dispon√≠veis para cons√≥rcio.
    
    **Caracter√≠sticas**:
    - ‚úÖ **Sem par√¢metros** - Consulta simples e direta
    - ‚úÖ **Dados est√°ticos** - Raramente mudam, ideal para cache
    - ‚úÖ **13 categorias** - Cobertura completa do sistema Newcon
    
    **Integra√ß√£o**: Chama o m√©todo `cnsTiposGrupos` do WebService SOAP da Newcon.
    **Cache**: Recomendado para dados que mudam raramente.
    
    **Exemplos de categorias**:
    - `IM` = IMOVEIS
    - `AI` = AUTOMOVEIS IMPORTADOS  
    - `MT` = MOTOCICLETAS
    - `EL` = ELETROELETRONICOS
    """
)
async def consultar_categorias(
    uc: ConsultarCatalogoUseCase = Depends(build_consultar_catalogo_uc),
):
    try:
        return await get_categorias(uc)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/filiais", 
    response_model=ListaFiliaisSchema,
    summary="Consultar Filiais de Venda",
    description="""
    **Consulta todas as filiais de venda cadastradas no sistema Newcon.**
    
    Este endpoint retorna a lista de filiais onde √© poss√≠vel realizar
    vendas de cons√≥rcio e consultar o cat√°logo de ofertas.
    
    **Caracter√≠sticas**:
    - ‚úÖ **Sem par√¢metros** - Consulta simples e direta
    - ‚úÖ **Dados est√°ticos** - Raramente mudam, ideal para cache
    - ‚úÖ **1 filial ativa** - TRIANGULO ADM. DE CONSORCIOS LTDA
    
    **Integra√ß√£o**: Chama o m√©todo `cnsFiliaisVendas` do WebService SOAP da Newcon.
    **Cache**: Recomendado para dados que mudam raramente.
    
    **Filiais dispon√≠veis**:
    - `1` = TRIANGULO ADM. DE CONSORCIOS LTDA
    """
)
async def consultar_filiais(
    uc: ConsultarCatalogoUseCase = Depends(build_consultar_catalogo_uc),
):
    try:
        return await get_filiais(uc)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/sale-types", 
    response_model=ListaTiposVendasSchema,
    summary="Consultar Tipos de Venda por Categoria",
    description="""
    **Consulta os tipos de venda dispon√≠veis para uma categoria espec√≠fica.**
    
    Este endpoint retorna os tipos de comercializa√ß√£o (ex: Venda Direta, Cons√≥rcio)
    dispon√≠veis para uma categoria como Im√≥veis, Ve√≠culos, etc.
    
    **Caracter√≠sticas**:
    - üîç **Filtro por categoria** - Especifique a categoria desejada
    - ‚ö†Ô∏è **Dados vari√°veis** - Nem todas as categorias possuem tipos de venda
    - üìä **Integra√ß√£o real** - Dados vindos diretamente da base Newcon
    
    **Par√¢metros**:
    - `tipo_grupo` (obrigat√≥rio): C√≥digo da categoria (ex: "IM" para Im√≥veis)
    
    **Integra√ß√£o**: Chama o m√©todo `cnsTiposVendas` do WebService SOAP da Newcon.
    
    **Exemplos de uso**:
    - `/sale-types?tipo_grupo=IM` ‚Üí Tipos de venda para Im√≥veis
    - `/sale-types?tipo_grupo=AI` ‚Üí Tipos de venda para Autom√≥veis Importados
    
    **Nota**: Algumas categorias podem retornar lista vazia se n√£o possu√≠rem
    tipos de venda cadastrados no sistema.
    """
)
async def consultar_tipos_venda(
    tipo_grupo: str = Query(
        ..., 
        description="C√≥digo do tipo de grupo (ex: IM=Im√≥veis, AI=Autom√≥veis Importados)",
        example="IM"
    ),
    uc: ConsultarCatalogoUseCase = Depends(build_consultar_catalogo_uc),
):
    try:
        return await get_tipos_venda(tipo_grupo, uc)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/items", 
    response_model=ListaBensDisponiveisSchema,
    summary="Consultar Bens (Cartas de Cr√©dito) Dispon√≠veis",
    description="""
    **Consulta os bens dispon√≠veis para cons√≥rcio (cartas de cr√©dito).**
    
    Este endpoint retorna a lista de bens dispon√≠veis com seus valores e descri√ß√µes
    para uma combina√ß√£o espec√≠fica de filial, categoria e tipo de venda.
    
    **Caracter√≠sticas**:
    - üí∞ **Valores reais** - Pre√ßos das cartas de cr√©dito em tempo real
    - üè¢ **Filtros espec√≠ficos** - Filial + Categoria + Tipo de Venda
    - üìã **Descri√ß√µes detalhadas** - Nome completo de cada bem
    
    **Par√¢metros obrigat√≥rios**:
    - `filial`: C√≥digo da filial (ex: "1" = TRIANGULO ADM.)
    - `tipo_grupo`: C√≥digo da categoria (ex: "IM" = Im√≥veis)
    - `tipo_venda`: C√≥digo do tipo de venda (ex: "10", "20")
    
    **Integra√ß√£o**: Chama o m√©todo `cnsBensDisponiveis` do WebService SOAP da Newcon.
    
    **Exemplos de uso**:
    - `/items?filial=1&tipo_grupo=IM&tipo_venda=10` ‚Üí Bens de Im√≥veis na filial 1
    - `/items?filial=1&tipo_grupo=AI&tipo_venda=20` ‚Üí Bens de Autom√≥veis Importados
    
    **Resultado**: Lista de cartas de cr√©dito com valores para montar a vitrine.
    """
)
async def consultar_bens_disponiveis(
    filial: str = Query(
        ..., 
        description="C√≥digo da filial (ex: 1=TRIANGULO ADM.)",
        example="1"
    ),
    tipo_grupo: str = Query(
        ..., 
        description="C√≥digo do tipo de grupo (ex: IM=Im√≥veis, AI=Autom√≥veis)",
        example="IM"
    ),
    tipo_venda: str = Query(
        ..., 
        description="C√≥digo do tipo de venda (ex: 10, 20, 30)",
        example="10"
    ),
    uc: ConsultarCatalogoUseCase = Depends(build_consultar_catalogo_uc),
):
    try:
        return await get_bens_disponiveis(filial, tipo_grupo, tipo_venda, uc)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/options", 
    response_model=ListaPrazosDisponiveisSchema,
    summary="Consultar Op√ß√µes Comerciais (Prazos e Presta√ß√µes)",
    description="""
    **Consulta as op√ß√µes comerciais dispon√≠veis para financiamento.**
    
    Este endpoint retorna as op√ß√µes de financiamento incluindo prazos, valores de
    presta√ß√£o, planos e informa√ß√µes sobre assembleias e cotas vagas.
    
    **Caracter√≠sticas**:
    - ‚è∞ **Prazos flex√≠veis** - M√∫ltiplas op√ß√µes de prazo dispon√≠veis
    - üí∞ **Presta√ß√µes calculadas** - Valores de presta√ß√£o em tempo real
    - üìÖ **Assembleias** - Datas de pr√≥xima assembleia e vencimento
    - üéØ **Filtros avan√ßados** - M√∫ltiplos par√¢metros para consulta espec√≠fica
    
    **Par√¢metros obrigat√≥rios**:
    - `unidade`: C√≥digo da unidade administrativa
    - `tipo_grupo`: C√≥digo da categoria (ex: "IM" = Im√≥veis)
    - `representante`: C√≥digo do representante comercial
    - `filial`: C√≥digo da filial (ex: "1" = TRIANGULO ADM.)
    
    **Par√¢metros opcionais**:
    - `situacao_grupo`: A=Ativo, F=Fechado, X=Cancelado
    - `pessoa`: F=F√≠sica, J=Jur√≠dica
    - `ordem_pesquisa`: G=Grupo, P=Prazo
    - `tipo_venda`: C√≥digo do tipo de venda
    - `bem`: C√≥digo do bem espec√≠fico
    - `prazo`: Prazo em meses
    - `dia_vencimento`: Dia do vencimento (1-31)
    - `data_assembleia`: Data da assembleia (YYYY-MM-DD)
    - `codigo_grupo`: C√≥digo do grupo espec√≠fico
    - `rateia`: S=Sim, N=N√£o
    
    **Integra√ß√£o**: Chama o m√©todo `cnsPrazosDisponiveis` do WebService SOAP da Newcon.
    
    **Exemplos de uso**:
    - `/options?unidade=001&tipo_grupo=IM&representante=000001&filial=1&pessoa=F&situacao_grupo=A&rateia=N`
    
    **Resultado**: Op√ß√µes comerciais completas para montar a vitrine de financiamento.
    """
)
async def consultar_opcoes_comerciais(
    unidade: str = Query(
        ..., 
        description="C√≥digo da unidade administrativa",
        example="001"
    ),
    tipo_grupo: str = Query(
        ..., 
        description="C√≥digo do tipo de grupo (ex: IM=Im√≥veis, AI=Autom√≥veis)",
        example="IM"
    ),
    representante: str = Query(
        ..., 
        description="C√≥digo do representante comercial",
        example="000001"
    ),
    filial: str = Query(
        ..., 
        description="C√≥digo da filial (ex: 1=TRIANGULO ADM.)",
        example="1"
    ),
    situacao_grupo: str = Query(
        default="A", 
        description="Situa√ß√£o do grupo (A=Ativo, F=Fechado, X=Cancelado)",
        example="A"
    ),
    pessoa: str = Query(
        default="F", 
        description="Tipo de pessoa (F=F√≠sica, J=Jur√≠dica)",
        example="F"
    ),
    ordem_pesquisa: str = Query(
        default="G", 
        description="Ordem de pesquisa (G=Grupo, P=Prazo)",
        example="G"
    ),
    tipo_venda: str = Query(None, description="C√≥digo do tipo de venda", example="10"),
    bem: str = Query(None, description="C√≥digo do bem espec√≠fico", example="123"),
    prazo: int = Query(None, description="Prazo em meses", example=120),
    dia_vencimento: int = Query(None, description="Dia do vencimento (1-31)", example=15),
    data_assembleia: str = Query(None, description="Data da assembleia (YYYY-MM-DD)", example="2024-12-01"),
    codigo_grupo: str = Query(None, description="C√≥digo do grupo espec√≠fico", example="456"),
    rateia: str = Query(default="N", description="Se rateia (S=Sim, N=N√£o)", example="N"),
    uc: ConsultarCatalogoUseCase = Depends(build_consultar_catalogo_uc),
):
    try:
        return await get_prazos_disponiveis(
            unidade=unidade,
            tipo_grupo=tipo_grupo,
            representante=representante,
            filial=filial,
            situacao_grupo=situacao_grupo,
            pessoa=pessoa,
            ordem_pesquisa=ordem_pesquisa,
            tipo_venda=tipo_venda,
            bem=bem,
            prazo=prazo,
            dia_vencimento=dia_vencimento,
            data_assembleia=data_assembleia,
            codigo_grupo=codigo_grupo,
            rateia=rateia,
            uc=uc,
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/rules", 
    response_model=RegraCobrancaSchema,
    summary="Consultar Regras de Cobran√ßa (Composi√ß√£o das Parcelas)",
    description="""
    **Consulta a composi√ß√£o detalhada das parcelas de um plano espec√≠fico.**
    
    Este endpoint retorna o breakdown financeiro completo incluindo percentuais
    de taxa administrativa, fundo de reserva, seguros e valor calculado por faixa.
    
    **Caracter√≠sticas**:
    - üí∞ **Breakdown financeiro** - Composi√ß√£o detalhada de cada parcela
    - üìä **Percentuais precisos** - Taxa adm, fundo reserva, seguros
    - üéØ **C√°lculo por faixa** - Valores espec√≠ficos para cada faixa de parcelas
    - üîç **Par√¢metros espec√≠ficos** - Todos os campos s√£o obrigat√≥rios para precis√£o
    
    **Par√¢metros obrigat√≥rios**:
    - `plano`: C√≥digo do plano de cons√≥rcio
    - `tipo_venda`: C√≥digo do tipo de venda (ex: "10", "20")
    - `bem`: C√≥digo do bem espec√≠fico
    - `tipo_grupo`: C√≥digo da categoria (ex: "IM" = Im√≥veis)
    - `filial`: C√≥digo da filial (ex: "1" = TRIANGULO ADM.)
    - `rateia`: S=Sim, N=N√£o
    - `numero_assembleia_emissao`: N√∫mero da assembleia de emiss√£o
    - `prazo`: Prazo em meses (ex: 60, 120, 180)
    - `sequencia_agrupamento`: Sequ√™ncia de agrupamento
    
    **Integra√ß√£o**: Chama o m√©todo `cnsRegraCobranca` do WebService SOAP da Newcon.
    
    **Exemplos de uso**:
    - `/rules?plano=7&tipo_venda=10&bem=123&tipo_grupo=IM&filial=1&rateia=N&numero_assembleia_emissao=45&prazo=120&sequencia_agrupamento=456`
    
    **Resultado**: Composi√ß√£o financeira detalhada para simula√ß√£o precisa de financiamento.
    """
)
async def consultar_regra_cobranca(
    plano: str = Query(
        ..., 
        description="C√≥digo do plano de cons√≥rcio",
        example="7"
    ),
    tipo_venda: str = Query(
        ..., 
        description="C√≥digo do tipo de venda (ex: 10, 20)",
        example="10"
    ),
    bem: str = Query(
        ..., 
        description="C√≥digo do bem espec√≠fico",
        example="123"
    ),
    tipo_grupo: str = Query(
        ..., 
        description="C√≥digo do tipo de grupo (ex: IM=Im√≥veis)",
        example="IM"
    ),
    filial: str = Query(
        ..., 
        description="C√≥digo da filial (ex: 1=TRIANGULO ADM.)",
        example="1"
    ),
    rateia: str = Query(
        ..., 
        description="Se rateia (S=Sim, N=N√£o)",
        example="N"
    ),
    numero_assembleia_emissao: str = Query(
        ..., 
        description="N√∫mero da assembleia de emiss√£o",
        example="45"
    ),
    prazo: int = Query(
        ..., 
        description="Prazo em meses (ex: 60, 120, 180)",
        example=120
    ),
    sequencia_agrupamento: str = Query(
        ..., 
        description="Sequ√™ncia de agrupamento",
        example="456"
    ),
    uc: ConsultarCatalogoUseCase = Depends(build_consultar_catalogo_uc),
):
    try:
        return await get_regra_cobranca(
            plano=plano,
            tipo_venda=tipo_venda,
            bem=bem,
            tipo_grupo=tipo_grupo,
            filial=filial,
            rateia=rateia,
            numero_assembleia_emissao=numero_assembleia_emissao,
            prazo=prazo,
            sequencia_agrupamento=sequencia_agrupamento,
            uc=uc,
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
